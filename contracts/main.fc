#include "imports/stdlib.fc";

const int minimal_balance = 1000000000;

() save_data(int counter, slice recent_sender, slice owner_address) impure inline {
    set_data(
        begin_cell()
        .store_uint(counter, 32)
        .store_slice(recent_sender)
        .store_slice(owner_address)
        .end_cell()
    );
}

(int, slice, slice) load_data() inline {
    slice ds = get_data().begin_parse();
    return (
        ds~load_uint(32), 
        ds~load_msg_addr(), 
        ds~load_msg_addr()
    );
}

() recv_internal(int msg_value, cell in_msg, slice in_msg_body) impure {
    slice cs = in_msg.begin_parse();
	int flags = cs~load_uint(4);
    slice sender_address = cs~load_msg_addr();
    int op_code = in_msg_body~load_uint(32);
    var (counter, recent_sender, owner_address) = load_data();
    if (op_code == 1) {
        int increment_by = in_msg_body~load_uint(32);
        counter += increment_by;
        save_data(counter, sender_address, owner_address);
        return();
    }
    if (op_code == 2) {
        ;; deposit logic
        return();
    }
    if (op_code == 3) {
        ;; withdraw logic
        ;; only address of the owner can withdraw funds
        int withdrawal_amount = in_msg_body~load_coins();
        throw_unless(35, equal_slice_bits(sender_address, owner_address)); ;; Invalid source address (he is not an owner)
        var [balance, _] = get_balance();
        throw_if(37, withdrawal_amount >= balance - minimal_balance); ;; Not enough TON. Message sends too much TON (or there is not enough TON after deducting fees).
        throw_unless(38, withdrawal_amount > 0); ;; Withdrawal amount must be positive
        send_raw_message(
            begin_cell()
            .store_uint(0x18, 6)
            .store_slice(sender_address)
            .store_coins(withdrawal_amount)
            .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
            .end_cell(),
            1 ;; Ordinary message mode + flag 1 to pay transfer fees separately
        );
        return();
    }
    throw(6);
}

(int, slice, slice) get_contract_data() method_id {
    var (counter, recent_sender, owner_address) = load_data();
    return (counter, recent_sender, owner_address);
}

int balance() method_id {
    var [balance, _] = get_balance();
    return balance;
}